
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\004\000\002\002\011\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\004\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\010\011" +
    "\000\002\010\015\000\002\010\013\000\002\014\011\000" +
    "\002\015\013\000\002\016\005\000\002\007\006\000\002" +
    "\013\004\000\002\013\006\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\005\004\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\006\000\002\005" +
    "\003\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\017" +
    "\020\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\003\000\002\021\005\000" +
    "\002\021\005\000\002\022\014\000\002\023\006\000\002" +
    "\023\007\000\002\025\011\000\002\026\004\000\002\026" +
    "\003\000\002\030\007\000\002\030\007\000\002\030\007" +
    "\000\002\030\007\000\002\030\004\000\002\027\012\000" +
    "\002\031\011\000\002\032\004\000\002\032\003\000\002" +
    "\033\007\000\002\033\007\000\002\033\007\000\002\033" +
    "\011\000\002\033\011\000\002\033\003\000\002\034\006" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\037\005\000\002\036\005\000\002" +
    "\036\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\040\005\000\002\041\005\000\002\041\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\046\011\000\002\045\004\000\002\045\003\000\002" +
    "\044\007\000\002\044\011\000\002\044\011\000\002\051" +
    "\005\000\002\050\005\000\002\050\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\054\005\000" +
    "\002\053\005\000\002\053\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012a\000\004\037\004\001\002\000\004\031\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\027\010\001\002\000\004\030\011\001\002\000" +
    "\004\006\012\001\002\000\040\003\041\032\013\033\044" +
    "\034\031\035\014\036\035\037\050\040\040\043\034\045" +
    "\047\046\030\047\027\054\017\057\043\067\032\001\002" +
    "\000\004\067\uffe6\001\002\000\004\067\uffe2\001\002\000" +
    "\042\003\041\007\u012c\032\013\033\044\034\031\035\014" +
    "\036\035\037\050\040\040\043\034\045\047\046\030\047" +
    "\027\054\017\057\043\067\032\001\002\000\046\003\ufff4" +
    "\007\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037" +
    "\ufff4\040\ufff4\041\ufff4\043\ufff4\045\ufff4\046\ufff4\047\ufff4" +
    "\054\ufff4\057\ufff4\064\ufff4\067\ufff4\001\002\000\004\027" +
    "\u0126\001\002\000\046\003\ufff6\007\ufff6\032\ufff6\033\ufff6" +
    "\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\043" +
    "\ufff6\045\ufff6\046\ufff6\047\ufff6\054\ufff6\057\ufff6\064\ufff6" +
    "\067\ufff6\001\002\000\004\024\u0125\001\002\000\046\003" +
    "\ufffc\007\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc" +
    "\037\ufffc\040\ufffc\041\ufffc\043\ufffc\045\ufffc\046\ufffc\047" +
    "\ufffc\054\ufffc\057\ufffc\064\ufffc\067\ufffc\001\002\000\004" +
    "\067\u0122\001\002\000\046\003\ufffe\007\ufffe\032\ufffe\033" +
    "\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe" +
    "\043\ufffe\045\ufffe\046\ufffe\047\ufffe\054\ufffe\057\ufffe\064" +
    "\ufffe\067\ufffe\001\002\000\046\003\ufffa\007\ufffa\032\ufffa" +
    "\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041" +
    "\ufffa\043\ufffa\045\ufffa\046\ufffa\047\ufffa\054\ufffa\057\ufffa" +
    "\064\ufffa\067\ufffa\001\002\000\004\024\u0121\001\002\000" +
    "\004\027\u0110\001\002\000\004\027\u0105\001\002\000\004" +
    "\067\uffe5\001\002\000\004\026\u0103\001\002\000\004\024" +
    "\u0102\001\002\000\004\006\372\001\002\000\004\067\uffe3" +
    "\001\002\000\046\003\ufffd\007\ufffd\032\ufffd\033\ufffd\034" +
    "\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\043\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\054\ufffd\057\ufffd\064\ufffd\067" +
    "\ufffd\001\002\000\046\003\ufffb\007\ufffb\032\ufffb\033\ufffb" +
    "\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\043" +
    "\ufffb\045\ufffb\046\ufffb\047\ufffb\054\ufffb\057\ufffb\064\ufffb" +
    "\067\ufffb\001\002\000\004\024\371\001\002\000\004\024" +
    "\370\001\002\000\046\003\ufff5\007\ufff5\032\ufff5\033\ufff5" +
    "\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\043" +
    "\ufff5\045\ufff5\046\ufff5\047\ufff5\054\ufff5\057\ufff5\064\ufff5" +
    "\067\ufff5\001\002\000\004\027\365\001\002\000\004\067" +
    "\uffe4\001\002\000\046\003\ufff9\007\ufff9\032\ufff9\033\ufff9" +
    "\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\043" +
    "\ufff9\045\ufff9\046\ufff9\047\ufff9\054\ufff9\057\ufff9\064\ufff9" +
    "\067\ufff9\001\002\000\046\003\ufff8\007\ufff8\032\ufff8\033" +
    "\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8" +
    "\043\ufff8\045\ufff8\046\ufff8\047\ufff8\054\ufff8\057\ufff8\064" +
    "\ufff8\067\ufff8\001\002\000\004\027\262\001\002\000\010" +
    "\100\053\101\052\102\051\001\002\000\004\027\233\001" +
    "\002\000\004\027\160\001\002\000\004\027\054\001\002" +
    "\000\004\030\055\001\002\000\004\006\056\001\002\000" +
    "\014\032\013\033\044\034\031\035\062\036\063\001\002" +
    "\000\016\007\157\032\013\033\044\034\031\035\062\036" +
    "\063\001\002\000\004\067\153\001\002\000\016\007\uffb5" +
    "\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\001\002\000" +
    "\006\067\uffe2\076\134\001\002\000\014\067\uffe3\076\066" +
    "\103\065\105\070\106\067\001\002\000\016\007\uffaf\032" +
    "\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\001\002\000\004" +
    "\026\131\001\002\000\004\077\113\001\002\000\004\026" +
    "\110\001\002\000\004\026\071\001\002\000\012\066\075" +
    "\067\073\070\072\111\074\001\002\000\020\007\uffab\024" +
    "\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\001\002" +
    "\000\020\007\uffaa\024\uffaa\032\uffaa\033\uffaa\034\uffaa\035" +
    "\uffaa\036\uffaa\001\002\000\004\006\101\001\002\000\020" +
    "\007\uffac\024\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036" +
    "\uffac\001\002\000\020\007\uffad\024\uffad\032\uffad\033\uffad" +
    "\034\uffad\035\uffad\036\uffad\001\002\000\004\024\100\001" +
    "\002\000\016\007\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\001\002\000\004\110\102\001\002\000\004\005" +
    "\103\001\002\000\004\066\104\001\002\000\004\005\105" +
    "\001\002\000\004\066\106\001\002\000\004\007\107\001" +
    "\002\000\022\005\uffb8\007\uffb8\024\uffb8\032\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\001\002\000\012\066\075\067" +
    "\073\070\072\111\074\001\002\000\004\024\112\001\002" +
    "\000\016\007\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036" +
    "\uffb2\001\002\000\004\104\114\001\002\000\004\026\115" +
    "\001\002\000\004\006\117\001\002\000\004\024\130\001" +
    "\002\000\010\066\122\067\120\111\074\001\002\000\006" +
    "\005\uffa4\007\uffa4\001\002\000\006\005\125\007\126\001" +
    "\002\000\006\005\uffa5\007\uffa5\001\002\000\006\005\uffa7" +
    "\007\uffa7\001\002\000\006\005\uffa6\007\uffa6\001\002\000" +
    "\010\066\122\067\120\111\074\001\002\000\004\024\uffa9" +
    "\001\002\000\006\005\uffa8\007\uffa8\001\002\000\016\007" +
    "\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\001\002" +
    "\000\012\066\075\067\073\070\072\111\074\001\002\000" +
    "\004\024\133\001\002\000\016\007\uffb4\032\uffb4\033\uffb4" +
    "\034\uffb4\035\uffb4\036\uffb4\001\002\000\004\077\135\001" +
    "\002\000\004\107\136\001\002\000\004\026\137\001\002" +
    "\000\004\006\141\001\002\000\004\024\152\001\002\000" +
    "\010\067\142\070\143\111\074\001\002\000\006\005\uff9e" +
    "\007\uff9e\001\002\000\006\005\uff9f\007\uff9f\001\002\000" +
    "\006\005\uffa1\007\uffa1\001\002\000\006\005\uffa0\007\uffa0" +
    "\001\002\000\006\005\147\007\150\001\002\000\010\067" +
    "\142\070\143\111\074\001\002\000\004\024\uffa3\001\002" +
    "\000\006\005\uffa2\007\uffa2\001\002\000\016\007\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\001\002\000\004" +
    "\026\154\001\002\000\012\066\075\067\073\070\072\111" +
    "\074\001\002\000\016\007\uffae\032\uffae\033\uffae\034\uffae" +
    "\035\uffae\036\uffae\001\002\000\016\007\uffb6\032\uffb6\033" +
    "\uffb6\034\uffb6\035\uffb6\036\uffb6\001\002\000\046\003\uffb7" +
    "\007\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037" +
    "\uffb7\040\uffb7\041\uffb7\043\uffb7\045\uffb7\046\uffb7\047\uffb7" +
    "\054\uffb7\057\uffb7\064\uffb7\067\uffb7\001\002\000\004\030" +
    "\161\001\002\000\004\006\162\001\002\000\006\035\163" +
    "\036\164\001\002\000\004\076\214\001\002\000\006\076" +
    "\172\103\171\001\002\000\010\007\167\035\163\036\164" +
    "\001\002\000\010\007\uff9b\035\uff9b\036\uff9b\001\002\000" +
    "\046\003\uff9d\007\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d" +
    "\036\uff9d\037\uff9d\040\uff9d\041\uff9d\043\uff9d\045\uff9d\046" +
    "\uff9d\047\uff9d\054\uff9d\057\uff9d\064\uff9d\067\uff9d\001\002" +
    "\000\010\007\uff9c\035\uff9c\036\uff9c\001\002\000\004\026" +
    "\211\001\002\000\004\077\173\001\002\000\004\104\174" +
    "\001\002\000\004\026\175\001\002\000\004\006\177\001" +
    "\002\000\004\024\210\001\002\000\010\066\201\067\200" +
    "\111\074\001\002\000\006\005\uff92\007\uff92\001\002\000" +
    "\006\005\uff93\007\uff93\001\002\000\006\005\205\007\206" +
    "\001\002\000\006\005\uff94\007\uff94\001\002\000\006\005" +
    "\uff95\007\uff95\001\002\000\010\066\201\067\200\111\074" +
    "\001\002\000\004\024\uff97\001\002\000\006\005\uff96\007" +
    "\uff96\001\002\000\010\007\uff99\035\uff99\036\uff99\001\002" +
    "\000\012\066\075\067\073\070\072\111\074\001\002\000" +
    "\004\024\213\001\002\000\010\007\uff9a\035\uff9a\036\uff9a" +
    "\001\002\000\004\077\215\001\002\000\004\107\216\001" +
    "\002\000\004\026\217\001\002\000\004\006\221\001\002" +
    "\000\004\024\232\001\002\000\010\067\223\070\222\111" +
    "\074\001\002\000\006\005\uff8d\007\uff8d\001\002\000\006" +
    "\005\uff8c\007\uff8c\001\002\000\006\005\227\007\230\001" +
    "\002\000\006\005\uff8e\007\uff8e\001\002\000\006\005\uff8f" +
    "\007\uff8f\001\002\000\010\067\223\070\222\111\074\001" +
    "\002\000\004\024\uff91\001\002\000\006\005\uff90\007\uff90" +
    "\001\002\000\010\007\uff98\035\uff98\036\uff98\001\002\000" +
    "\004\030\234\001\002\000\004\006\235\001\002\000\010" +
    "\003\241\035\237\036\240\001\002\000\012\003\241\007" +
    "\261\035\237\036\240\001\002\000\004\067\252\001\002" +
    "\000\004\067\244\001\002\000\004\024\243\001\002\000" +
    "\012\003\uffbe\007\uffbe\035\uffbe\036\uffbe\001\002\000\012" +
    "\003\uffb9\007\uffb9\035\uffb9\036\uffb9\001\002\000\004\026" +
    "\245\001\002\000\006\066\246\111\074\001\002\000\004" +
    "\024\251\001\002\000\004\024\250\001\002\000\012\003" +
    "\uffbc\007\uffbc\035\uffbc\036\uffbc\001\002\000\012\003\uffbd" +
    "\007\uffbd\035\uffbd\036\uffbd\001\002\000\004\026\253\001" +
    "\002\000\006\070\254\111\074\001\002\000\004\024\257" +
    "\001\002\000\004\024\256\001\002\000\012\003\uffba\007" +
    "\uffba\035\uffba\036\uffba\001\002\000\012\003\uffbb\007\uffbb" +
    "\035\uffbb\036\uffbb\001\002\000\012\003\uffbf\007\uffbf\035" +
    "\uffbf\036\uffbf\001\002\000\046\003\uffc0\007\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041" +
    "\uffc0\043\uffc0\045\uffc0\046\uffc0\047\uffc0\054\uffc0\057\uffc0" +
    "\064\uffc0\067\uffc0\001\002\000\014\032\013\033\044\034" +
    "\031\035\014\036\035\001\002\000\004\067\264\001\002" +
    "\000\004\026\265\001\002\000\020\025\275\056\270\062" +
    "\273\066\271\067\274\070\266\071\276\001\002\000\044" +
    "\004\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017" +
    "\uffd1\020\uffd1\021\uffd1\023\uffd1\024\uffd1\026\uffd1\030\uffd1" +
    "\072\uffd1\073\uffd1\074\uffd1\075\uffd1\001\002\000\044\004" +
    "\uffd8\012\351\013\355\014\356\015\uffd8\016\uffd8\017\354" +
    "\020\uffd8\021\352\023\353\024\uffd8\026\uffd8\030\uffd8\072" +
    "\uffd8\073\uffd8\074\uffd8\075\uffd8\001\002\000\044\004\uffce" +
    "\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020" +
    "\uffce\021\uffce\023\uffce\024\uffce\026\uffce\030\uffce\072\uffce" +
    "\073\uffce\074\uffce\075\uffce\001\002\000\044\004\uffcf\012" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\023\uffcf\024\uffcf\026\uffcf\030\uffcf\072\uffcf\073" +
    "\uffcf\074\uffcf\075\uffcf\001\002\000\024\015\301\016\307" +
    "\020\304\024\321\026\302\072\306\073\305\074\300\075" +
    "\303\001\002\000\044\004\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\023\uffcd\024" +
    "\uffcd\026\uffcd\030\uffcd\072\uffcd\073\uffcd\074\uffcd\075\uffcd" +
    "\001\002\000\044\004\uffd0\012\uffd0\013\uffd0\014\uffd0\015" +
    "\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\023\uffd0\024\uffd0" +
    "\026\uffd0\030\uffd0\072\uffd0\073\uffd0\074\uffd0\075\uffd0\001" +
    "\002\000\020\025\275\056\270\062\273\066\271\067\274" +
    "\070\266\071\276\001\002\000\044\004\uffcc\012\uffcc\013" +
    "\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\023\uffcc\024\uffcc\026\uffcc\030\uffcc\072\uffcc\073\uffcc\074" +
    "\uffcc\075\uffcc\001\002\000\030\004\uffe1\015\301\016\307" +
    "\020\uffe1\024\uffe1\026\uffe1\030\uffe1\072\uffe1\073\uffe1\074" +
    "\uffe1\075\uffe1\001\002\000\020\025\275\056\270\062\273" +
    "\066\271\067\274\070\266\071\276\001\002\000\020\025" +
    "\275\056\270\062\273\066\271\067\274\070\266\071\276" +
    "\001\002\000\004\026\315\001\002\000\020\025\275\056" +
    "\270\062\273\066\271\067\274\070\266\071\276\001\002" +
    "\000\020\025\275\056\270\062\273\066\271\067\274\070" +
    "\266\071\276\001\002\000\020\025\275\056\270\062\273" +
    "\066\271\067\274\070\266\071\276\001\002\000\020\025" +
    "\275\056\270\062\273\066\271\067\274\070\266\071\276" +
    "\001\002\000\020\025\275\056\270\062\273\066\271\067" +
    "\274\070\266\071\276\001\002\000\030\004\uffdf\015\301" +
    "\016\uffdf\020\uffdf\024\uffdf\026\uffdf\030\uffdf\072\uffdf\073" +
    "\uffdf\074\uffdf\075\uffdf\001\002\000\030\004\uffde\015\301" +
    "\016\307\020\uffde\024\uffde\026\uffde\030\uffde\072\uffde\073" +
    "\uffde\074\uffde\075\uffde\001\002\000\030\004\uffdd\015\301" +
    "\016\307\020\uffdd\024\uffdd\026\uffdd\030\uffdd\072\uffdd\073" +
    "\uffdd\074\uffdd\075\uffdd\001\002\000\030\004\uffda\015\301" +
    "\016\307\020\uffda\024\uffda\026\uffda\030\uffda\072\uffda\073" +
    "\uffda\074\uffda\075\uffda\001\002\000\030\004\uffdb\015\301" +
    "\016\307\020\uffdb\024\uffdb\026\uffdb\030\uffdb\072\uffdb\073" +
    "\uffdb\074\uffdb\075\uffdb\001\002\000\020\025\275\056\270" +
    "\062\273\066\271\067\274\070\266\071\276\001\002\000" +
    "\030\004\uffd9\015\301\016\307\020\uffd9\024\uffd9\026\uffd9" +
    "\030\uffd9\072\uffd9\073\uffd9\074\uffd9\075\uffd9\001\002\000" +
    "\030\004\uffe0\015\uffe0\016\uffe0\020\uffe0\024\uffe0\026\uffe0" +
    "\030\uffe0\072\uffe0\073\uffe0\074\uffe0\075\uffe0\001\002\000" +
    "\030\004\uffdc\015\301\016\307\020\uffdc\024\uffdc\026\uffdc" +
    "\030\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc\001\002\000" +
    "\020\025\275\056\270\062\273\066\271\067\274\070\322" +
    "\071\276\001\002\000\040\012\uffd1\013\uffd1\014\uffd1\015" +
    "\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\023\uffd1\024\uffc6" +
    "\026\uffd1\072\uffd1\073\uffd1\074\uffd1\075\uffd1\001\002\000" +
    "\004\024\335\001\002\000\022\015\301\016\307\020\304" +
    "\026\302\072\330\073\327\074\325\075\326\001\002\000" +
    "\020\025\275\056\270\062\273\066\271\067\274\070\266" +
    "\071\276\001\002\000\020\025\275\056\270\062\273\066" +
    "\271\067\274\070\266\071\276\001\002\000\020\025\275" +
    "\056\270\062\273\066\271\067\274\070\266\071\276\001" +
    "\002\000\020\025\275\056\270\062\273\066\271\067\274" +
    "\070\266\071\276\001\002\000\024\015\301\016\307\020" +
    "\uffde\024\uffc9\026\uffde\072\uffde\073\uffde\074\uffde\075\uffde" +
    "\001\002\000\024\015\301\016\307\020\uffdd\024\uffca\026" +
    "\uffdd\072\uffdd\073\uffdd\074\uffdd\075\uffdd\001\002\000\024" +
    "\015\301\016\307\020\uffdb\024\uffc8\026\uffdb\072\uffdb\073" +
    "\uffdb\074\uffdb\075\uffdb\001\002\000\024\015\301\016\307" +
    "\020\uffdc\024\uffc7\026\uffdc\072\uffdc\073\uffdc\074\uffdc\075" +
    "\uffdc\001\002\000\004\067\336\001\002\000\006\012\345" +
    "\013\346\001\002\000\004\030\340\001\002\000\004\006" +
    "\341\001\002\000\040\003\041\032\013\033\044\034\031" +
    "\035\014\036\035\037\050\040\040\043\034\045\047\046" +
    "\030\047\027\054\017\057\043\067\032\001\002\000\042" +
    "\003\041\007\344\032\013\033\044\034\031\035\014\036" +
    "\035\037\050\040\040\043\034\045\047\046\030\047\027" +
    "\054\017\057\043\067\032\001\002\000\046\003\uffff\007" +
    "\uffff\032\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037\uffff" +
    "\040\uffff\041\uffff\043\uffff\045\uffff\046\uffff\047\uffff\054" +
    "\uffff\057\uffff\064\uffff\067\uffff\001\002\000\046\003\uffcb" +
    "\007\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037" +
    "\uffcb\040\uffcb\041\uffcb\043\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\054\uffcb\057\uffcb\064\uffcb\067\uffcb\001\002\000\004\012" +
    "\350\001\002\000\004\013\347\001\002\000\004\030\uffc4" +
    "\001\002\000\004\030\uffc5\001\002\000\016\056\270\062" +
    "\273\066\271\067\274\070\266\071\276\001\002\000\016" +
    "\056\270\062\273\066\271\067\274\070\266\071\276\001" +
    "\002\000\016\056\270\062\273\066\271\067\274\070\266" +
    "\071\276\001\002\000\016\056\270\062\273\066\271\067" +
    "\274\070\266\071\276\001\002\000\016\056\270\062\273" +
    "\066\271\067\274\070\266\071\276\001\002\000\016\056" +
    "\270\062\273\066\271\067\274\070\266\071\276\001\002" +
    "\000\044\004\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016" +
    "\uffd5\017\354\020\uffd5\021\352\023\353\024\uffd5\026\uffd5" +
    "\030\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5\001\002\000" +
    "\044\004\uffd3\012\351\013\uffd3\014\356\015\uffd3\016\uffd3" +
    "\017\354\020\uffd3\021\352\023\353\024\uffd3\026\uffd3\030" +
    "\uffd3\072\uffd3\073\uffd3\074\uffd3\075\uffd3\001\002\000\044" +
    "\004\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\021\352\023\uffd6\024\uffd6\026\uffd6\030\uffd6" +
    "\072\uffd6\073\uffd6\074\uffd6\075\uffd6\001\002\000\044\004" +
    "\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\021\352\023\uffd2\024\uffd2\026\uffd2\030\uffd2\072" +
    "\uffd2\073\uffd2\074\uffd2\075\uffd2\001\002\000\044\004\uffd7" +
    "\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020" +
    "\uffd7\021\uffd7\023\uffd7\024\uffd7\026\uffd7\030\uffd7\072\uffd7" +
    "\073\uffd7\074\uffd7\075\uffd7\001\002\000\044\004\uffd4\012" +
    "\uffd4\013\uffd4\014\356\015\uffd4\016\uffd4\017\354\020\uffd4" +
    "\021\352\023\353\024\uffd4\026\uffd4\030\uffd4\072\uffd4\073" +
    "\uffd4\074\uffd4\075\uffd4\001\002\000\020\025\275\056\270" +
    "\062\273\066\271\067\274\070\266\071\276\001\002\000" +
    "\024\015\301\016\307\020\304\026\302\030\367\072\306" +
    "\073\305\074\300\075\303\001\002\000\004\024\uffe9\001" +
    "\002\000\046\003\ufff0\007\ufff0\032\ufff0\033\ufff0\034\ufff0" +
    "\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\043\ufff0\045" +
    "\ufff0\046\ufff0\047\ufff0\054\ufff0\057\ufff0\064\ufff0\067\ufff0" +
    "\001\002\000\046\003\ufff7\007\ufff7\032\ufff7\033\ufff7\034" +
    "\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\043\ufff7" +
    "\045\ufff7\046\ufff7\047\ufff7\054\ufff7\057\ufff7\064\ufff7\067" +
    "\ufff7\001\002\000\040\003\041\032\013\033\044\034\031" +
    "\035\014\036\035\037\050\040\040\043\034\045\047\046" +
    "\030\047\027\054\017\057\043\067\032\001\002\000\042" +
    "\003\041\007\374\032\013\033\044\034\031\035\014\036" +
    "\035\037\050\040\040\043\034\045\047\046\030\047\027" +
    "\054\017\057\043\067\032\001\002\000\004\054\375\001" +
    "\002\000\004\027\376\001\002\000\020\025\275\056\270" +
    "\062\273\066\271\067\274\070\266\071\276\001\002\000" +
    "\024\015\301\016\307\020\304\026\302\030\u0100\072\306" +
    "\073\305\074\300\075\303\001\002\000\004\024\u0101\001" +
    "\002\000\046\003\uffeb\007\uffeb\032\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\043\uffeb\045" +
    "\uffeb\046\uffeb\047\uffeb\054\uffeb\057\uffeb\064\uffeb\067\uffeb" +
    "\001\002\000\046\003\ufff3\007\ufff3\032\ufff3\033\ufff3\034" +
    "\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\043\ufff3" +
    "\045\ufff3\046\ufff3\047\ufff3\054\ufff3\057\ufff3\064\ufff3\067" +
    "\ufff3\001\002\000\020\025\275\056\270\062\273\066\271" +
    "\067\274\070\266\071\276\001\002\000\024\015\301\016" +
    "\307\020\304\024\uffea\026\302\072\306\073\305\074\300" +
    "\075\303\001\002\000\020\025\275\056\270\062\273\066" +
    "\271\067\274\070\266\071\276\001\002\000\024\015\301" +
    "\016\307\020\304\026\302\030\u0107\072\306\073\305\074" +
    "\300\075\303\001\002\000\004\006\u0108\001\002\000\040" +
    "\003\041\032\013\033\044\034\031\035\014\036\035\037" +
    "\050\040\040\043\034\045\047\046\030\047\027\054\017" +
    "\057\043\067\032\001\002\000\042\003\041\007\u010a\032" +
    "\013\033\044\034\031\035\014\036\035\037\050\040\040" +
    "\043\034\045\047\046\030\047\027\054\017\057\043\067" +
    "\032\001\002\000\050\003\uffef\007\uffef\032\uffef\033\uffef" +
    "\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\043" +
    "\uffef\044\u010b\045\uffef\046\uffef\047\uffef\054\uffef\057\uffef" +
    "\064\uffef\067\uffef\001\002\000\006\006\u010d\046\030\001" +
    "\002\000\046\003\uffed\007\uffed\032\uffed\033\uffed\034\uffed" +
    "\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\043\uffed\045" +
    "\uffed\046\uffed\047\uffed\054\uffed\057\uffed\064\uffed\067\uffed" +
    "\001\002\000\040\003\041\032\013\033\044\034\031\035" +
    "\014\036\035\037\050\040\040\043\034\045\047\046\030" +
    "\047\027\054\017\057\043\067\032\001\002\000\042\003" +
    "\041\007\u010f\032\013\033\044\034\031\035\014\036\035" +
    "\037\050\040\040\043\034\045\047\046\030\047\027\054" +
    "\017\057\043\067\032\001\002\000\046\003\uffee\007\uffee" +
    "\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040" +
    "\uffee\041\uffee\043\uffee\045\uffee\046\uffee\047\uffee\054\uffee" +
    "\057\uffee\064\uffee\067\uffee\001\002\000\004\067\u0111\001" +
    "\002\000\004\030\u0112\001\002\000\004\006\u0113\001\002" +
    "\000\004\041\u0115\001\002\000\006\041\u011a\064\u0119\001" +
    "\002\000\020\025\275\056\270\062\273\066\271\067\274" +
    "\070\266\071\276\001\002\000\024\004\u0117\015\301\016" +
    "\307\020\304\026\302\072\306\073\305\074\300\075\303" +
    "\001\002\000\040\003\041\032\013\033\044\034\031\035" +
    "\014\036\035\037\050\040\040\043\034\045\047\046\030" +
    "\047\027\054\017\057\043\067\032\001\002\000\044\003" +
    "\041\032\013\033\044\034\031\035\014\036\035\037\050" +
    "\040\040\041\uffc2\043\034\045\047\046\030\047\027\054" +
    "\017\057\043\064\uffc2\067\032\001\002\000\004\004\u011e" +
    "\001\002\000\020\025\275\056\270\062\273\066\271\067" +
    "\274\070\266\071\276\001\002\000\024\004\u011c\015\301" +
    "\016\307\020\304\026\302\072\306\073\305\074\300\075" +
    "\303\001\002\000\040\003\041\032\013\033\044\034\031" +
    "\035\014\036\035\037\050\040\040\043\034\045\047\046" +
    "\030\047\027\054\017\057\043\067\032\001\002\000\044" +
    "\003\041\032\013\033\044\034\031\035\014\036\035\037" +
    "\050\040\040\041\uffc1\043\034\045\047\046\030\047\027" +
    "\054\017\057\043\064\uffc1\067\032\001\002\000\040\003" +
    "\041\032\013\033\044\034\031\035\014\036\035\037\050" +
    "\040\040\043\034\045\047\046\030\047\027\054\017\057" +
    "\043\067\032\001\002\000\042\003\041\007\u0120\032\013" +
    "\033\044\034\031\035\014\036\035\037\050\040\040\043" +
    "\034\045\047\046\030\047\027\054\017\057\043\067\032" +
    "\001\002\000\046\003\uffc3\007\uffc3\032\uffc3\033\uffc3\034" +
    "\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\043\uffc3" +
    "\045\uffc3\046\uffc3\047\uffc3\054\uffc3\057\uffc3\064\uffc3\067" +
    "\uffc3\001\002\000\046\003\ufff1\007\ufff1\032\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\043" +
    "\ufff1\045\ufff1\046\ufff1\047\ufff1\054\ufff1\057\ufff1\064\ufff1" +
    "\067\ufff1\001\002\000\006\024\uffe8\026\u0123\001\002\000" +
    "\020\025\275\056\270\062\273\066\271\067\274\070\266" +
    "\071\276\001\002\000\024\015\301\016\307\020\304\024" +
    "\uffe7\026\302\072\306\073\305\074\300\075\303\001\002" +
    "\000\046\003\ufff2\007\ufff2\032\ufff2\033\ufff2\034\ufff2\035" +
    "\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\043\ufff2\045\ufff2" +
    "\046\ufff2\047\ufff2\054\ufff2\057\ufff2\064\ufff2\067\ufff2\001" +
    "\002\000\020\025\275\056\270\062\273\066\271\067\274" +
    "\070\266\071\276\001\002\000\024\015\301\016\307\020" +
    "\304\026\302\030\u0128\072\306\073\305\074\300\075\303" +
    "\001\002\000\004\006\u0129\001\002\000\040\003\041\032" +
    "\013\033\044\034\031\035\014\036\035\037\050\040\040" +
    "\043\034\045\047\046\030\047\027\054\017\057\043\067" +
    "\032\001\002\000\042\003\041\007\u012b\032\013\033\044" +
    "\034\031\035\014\036\035\037\050\040\040\043\034\045" +
    "\047\046\030\047\027\054\017\057\043\067\032\001\002" +
    "\000\046\003\uffec\007\uffec\032\uffec\033\uffec\034\uffec\035" +
    "\uffec\036\uffec\037\uffec\040\uffec\041\uffec\043\uffec\045\uffec" +
    "\046\uffec\047\uffec\054\uffec\057\uffec\064\uffec\067\uffec\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012a\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\003\014\004\023\006" +
    "\021\007\020\010\035\012\022\013\032\014\036\015\024" +
    "\016\025\017\044\022\045\025\017\031\041\046\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\004\342" +
    "\006\021\007\020\010\035\012\022\013\032\014\036\015" +
    "\024\016\025\017\044\022\045\025\017\031\041\046\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\057\032\056\033\060\034\063\001\001\000" +
    "\010\012\057\033\155\034\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\075\035\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\075\035\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\115\001\001\000\002\001\001" +
    "\000\010\027\123\036\120\043\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\123\043\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\075\035\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\137\001\001\000\002\001\001\000\010\027" +
    "\144\041\145\042\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\144\042\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\075\035\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\044\165\045\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\175\001\001\000\002\001\001\000\010\027\202" +
    "\047\203\050\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\202\047\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\075\035\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\217" +
    "\001\001\000\002\001\001\000\010\027\224\052\225\053" +
    "\223\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\224\052\230\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\235\030\241\001\001\000\004\030\257\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\246\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\254\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\262\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\271\011\266\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\276\011\266\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\317\011\266\001\001\000\006" +
    "\005\316\011\266\001\001\000\002\001\001\000\006\005" +
    "\313\011\266\001\001\000\006\005\312\011\266\001\001" +
    "\000\006\005\311\011\266\001\001\000\006\005\310\011" +
    "\266\001\001\000\006\005\307\011\266\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\315\011\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\323\011\266\020\322\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\333\011" +
    "\266\001\001\000\006\005\332\011\266\001\001\000\006" +
    "\005\331\011\266\001\001\000\006\005\330\011\266\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\336\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\341" +
    "\004\023\006\021\007\020\010\035\012\022\013\032\014" +
    "\036\015\024\016\025\017\044\022\045\025\017\031\041" +
    "\046\015\001\001\000\036\004\342\006\021\007\020\010" +
    "\035\012\022\013\032\014\036\015\024\016\025\017\044" +
    "\022\045\025\017\031\041\046\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\363\001" +
    "\001\000\004\011\362\001\001\000\004\011\361\001\001" +
    "\000\004\011\360\001\001\000\004\011\357\001\001\000" +
    "\004\011\356\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\365\011\266\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\372\004\023\006\021\007\020\010\035" +
    "\012\022\013\032\014\036\015\024\016\025\017\044\022" +
    "\045\025\017\031\041\046\015\001\001\000\036\004\342" +
    "\006\021\007\020\010\035\012\022\013\032\014\036\015" +
    "\024\016\025\017\044\022\045\025\017\031\041\046\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\376\011\266\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\u0103\011" +
    "\266\001\001\000\002\001\001\000\006\005\u0105\011\266" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\u0108\004\023\006\021\007\020\010\035\012\022\013\032" +
    "\014\036\015\024\016\025\017\044\022\045\025\017\031" +
    "\041\046\015\001\001\000\036\004\342\006\021\007\020" +
    "\010\035\012\022\013\032\014\036\015\024\016\025\017" +
    "\044\022\045\025\017\031\041\046\015\001\001\000\002" +
    "\001\001\000\004\010\u010b\001\001\000\002\001\001\000" +
    "\040\003\u010d\004\023\006\021\007\020\010\035\012\022" +
    "\013\032\014\036\015\024\016\025\017\044\022\045\025" +
    "\017\031\041\046\015\001\001\000\036\004\342\006\021" +
    "\007\020\010\035\012\022\013\032\014\036\015\024\016" +
    "\025\017\044\022\045\025\017\031\041\046\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u0113\001\001\000\002\001\001" +
    "\000\006\005\u0115\011\266\001\001\000\002\001\001\000" +
    "\040\003\u0117\004\023\006\021\007\020\010\035\012\022" +
    "\013\032\014\036\015\024\016\025\017\044\022\045\025" +
    "\017\031\041\046\015\001\001\000\036\004\342\006\021" +
    "\007\020\010\035\012\022\013\032\014\036\015\024\016" +
    "\025\017\044\022\045\025\017\031\041\046\015\001\001" +
    "\000\002\001\001\000\006\005\u011a\011\266\001\001\000" +
    "\002\001\001\000\040\003\u011c\004\023\006\021\007\020" +
    "\010\035\012\022\013\032\014\036\015\024\016\025\017" +
    "\044\022\045\025\017\031\041\046\015\001\001\000\036" +
    "\004\342\006\021\007\020\010\035\012\022\013\032\014" +
    "\036\015\024\016\025\017\044\022\045\025\017\031\041" +
    "\046\015\001\001\000\040\003\u011e\004\023\006\021\007" +
    "\020\010\035\012\022\013\032\014\036\015\024\016\025" +
    "\017\044\022\045\025\017\031\041\046\015\001\001\000" +
    "\036\004\342\006\021\007\020\010\035\012\022\013\032" +
    "\014\036\015\024\016\025\017\044\022\045\025\017\031" +
    "\041\046\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\u0123\011\266\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\u0126\011\266" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\u0129\004\023\006\021\007\020\010\035\012\022\013\032" +
    "\014\036\015\024\016\025\017\044\022\045\025\017\031" +
    "\041\046\015\001\001\000\036\004\342\006\021\007\020" +
    "\010\035\012\022\013\032\014\036\015\024\016\025\017" +
    "\044\022\045\025\017\031\041\046\015\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String errores_s = ""; 
    public static String errores_2s = ""; 
    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left    );
            Errores.DataErrores.addError(" Sintactico  " , s.right, s.left, s.value.toString());
            errores_s += "<tr><td>Sintáctico</td><td> Error sintactico encontrado: \""+s.value+"\"</td><td>"+(s.left+1)+"</td><td>"+(s.right+1)+"</td></tr>\n";
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
             Errores.DataErrores.addError(" Sintactico sin recuperacion " , s.right, s.left, s.value.toString());
              errores_s += "<tr><td>Sintáctico</td><td> Error sintactico encontrado: \""+s.value+"\"</td><td>"+(s.left+1)+"</td><td>"+(s.right+1)+"</td></tr>\n";
             System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }
String TituloBarras ;
String TituloX;
String TituloY;
String TituloPie;
Object valorId; 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= VOID MAIN PARA PARC LLAVE_A lista_instr LLAVE_C 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList lista = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                        
                                         LinkedList<String> lista1 = new LinkedList<>();                                            
                                            lista1.add("def main (): ");
                                           Traductor.Traduc.contador++;
                                            lista1.addAll(Traductor.Traduc.tabulaciones(lista));
                                            Traductor.Traduc.contador--;    
                                             lista1.add("if_name_= \" _main_ \": \n \t \t main()" );
                                             Traductor.Traduc.traduccion = lista1;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_instr ::= lista_instr instruccion 
            {
              LinkedList RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList lista = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            lista.addAll((LinkedList) val);
            RESULT = (LinkedList) lista;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instr ::= instruccion 
            {
              LinkedList RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            LinkedList<String> lista = new LinkedList<>();
            lista.addAll((LinkedList) val);
            RESULT = (LinkedList) lista;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= if 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= pcomaE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= while 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= dowhile 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= for 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= switch 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= BREAK PCOMA 
            {
              Object RESULT =null;
		
                                            LinkedList<String> lista = new LinkedList<>();
                                            RESULT = lista;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= globales 
            {
              Object RESULT =null;
		
                                            LinkedList<String> lista = new LinkedList<>();
                                            RESULT = lista;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= gBarras 
            {
              Object RESULT =null;
		
                                            LinkedList<String> lista = new LinkedList<>();
                                            RESULT = lista;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= gPie 
            {
              Object RESULT =null;
		
                                            LinkedList<String> lista = new LinkedList<>();
                                            RESULT = lista;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // pcomaE ::= asignacion PCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pcomaE",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // pcomaE ::= instr_mostrar PCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pcomaE",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // pcomaE ::= actualizacion PCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pcomaE",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // pcomaE ::= error PCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pcomaE",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // if ::= IF PARA expresion PARC LLAVE_A lista_instr LLAVE_C 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            LinkedList<String> lista = new LinkedList<>();
                                            lista.add("if  "+ exp + ": \n");
                                           Traductor.Traduc.contador++;
                                            lista.addAll(Traductor.Traduc.tabulaciones(inst));
                                            Traductor.Traduc.contador--;
                                            RESULT = lista;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // if ::= IF PARA expresion PARC LLAVE_A lista_instr LLAVE_C ELSE LLAVE_A lista_instr LLAVE_C 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int inst2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int inst2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList inst2 = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            LinkedList<String> lista = new LinkedList<>();
                                            lista.add("if "+ exp + ":");
                                           Traductor.Traduc.contador++;
                                            lista.addAll(Traductor.Traduc.tabulaciones(inst));
                                            Traductor.Traduc.contador--;

                                           lista.add("else: ");
                                           Traductor.Traduc.contador++;
                                            lista.addAll(Traductor.Traduc.tabulaciones(inst2));
                                            Traductor.Traduc.contador--;

                                            RESULT = lista;
                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // if ::= IF PARA expresion PARC LLAVE_A lista_instr LLAVE_C ELSE if 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            LinkedList<String> lista = new LinkedList<>();
                                            lista.add("if "+ exp + ":");
                                           Traductor.Traduc.contador++;
                                            lista.addAll(Traductor.Traduc.tabulaciones(inst));
                                            Traductor.Traduc.contador--;
                                            lista.addAll(Traductor.Traduc.elif((LinkedList) val));                                            
                                            RESULT = lista;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // while ::= WHILE PARA expresion PARC LLAVE_A lista_instr LLAVE_C 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            LinkedList<String> lista = new LinkedList<>();
                                            lista.add("while  "+ exp + ":");
                                           Traductor.Traduc.contador++;
                                            lista.addAll(Traductor.Traduc.tabulaciones(inst));
                                            Traductor.Traduc.contador--;
                                            RESULT = lista;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // dowhile ::= DO LLAVE_A lista_instr LLAVE_C WHILE PARA expresion PARC PCOMA 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                            LinkedList<String> lista = new LinkedList<>();
                                            lista.add("while True:");
                                            LinkedList<String> lista2 = new LinkedList<>();
                                            
                                            lista2.addAll((LinkedList) inst);
                                            lista2.add("if (" + exp + "): \n \t \t break" );
                                           Traductor.Traduc.contador++;
                                            lista.addAll(Traductor.Traduc.tabulaciones(lista2));
                                            Traductor.Traduc.contador--;
                                            RESULT = lista;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dowhile",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // actualizacion ::= ID EQUALS expresion 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            LinkedList<String> lista = new LinkedList<>();
                                            lista.add(id1+" = " + exp); 
                                            RESULT = lista;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actualizacion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instr_mostrar ::= PRINT PARA expresion PARC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                LinkedList<String> lista = new LinkedList<>();
                lista.add("print("+val+")"); 
                RESULT = lista;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_mostrar",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // asignacion ::= tipoDato ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                    LinkedList<String> lista = new LinkedList<>();
                                    lista.add("var "+val); 
                                    RESULT = lista;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // asignacion ::= tipoDato ID EQUALS expresion 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            LinkedList<String> lista = new LinkedList<>();
                                            lista.add("var "+id1+" = " + exp); 
                                            RESULT = lista;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipoDato ::= CHAR_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipoDato ::= BOOL_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipoDato ::= INT_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipoDato ::= STRING_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipoDato ::= DOUBLE_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= NOT expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT ="!"+ val1.toString()   ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= expresion AND expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val1.toString() + "  and  " + val2.toString()  ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= expresion OR expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val1.toString() + "  or " + val2.toString()  ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresion MENORK expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val1.toString() + "  < " + val2.toString()  ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresion MAYORK expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val1.toString() + " >  " + val2.toString()  ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= expresion MENORIK expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val1.toString() + "  >=  " + val2.toString()  ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= expresion MAYORIK expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val1.toString() + " <=  " + val2.toString()  ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= expresion DISTINTO expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val1.toString() + " !=  " + val2.toString()  ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= expresion EQUALS EQUALS expresion 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val1.toString() + " ==  " + val2.toString()  ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= aritmetico 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // aritmetico ::= aritmetico POTENCIA aritmetico 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val1.toString() + " ^ " + val2.toString()  ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetico",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // aritmetico ::= aritmetico DIVISION aritmetico 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val1.toString() + " / " + val2.toString()  ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetico",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // aritmetico ::= aritmetico MULTI aritmetico 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val1.toString() + " * " + val2.toString()  ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetico",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // aritmetico ::= aritmetico MAS aritmetico 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val1.toString() + " + " + val2.toString()  ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetico",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // aritmetico ::= aritmetico MENOS aritmetico 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val1.toString() + " - " + val2.toString()  ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetico",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // aritmetico ::= aritmetico PORCENTAJE aritmetico 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val1.toString() + " % " + val2.toString()  ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetico",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // aritmetico ::= NUM 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetico",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // aritmetico ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetico",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // aritmetico ::= STRING 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetico",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // aritmetico ::= TRUE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "True" ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetico",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // aritmetico ::= FALSE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "False"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetico",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // aritmetico ::= CHAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetico",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // for ::= FOR PARA tipoDato ID EQUALS expresion PCOMA condicionFor PCOMA masMenos PARC LLAVE_A lista_instr LLAVE_C 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int condileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int condiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object condi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		     
                                    LinkedList<String> lista = new LinkedList<>();
                                        if (val3.equals("+")) {
                                                lista.add("for "+id + " in range("+exp + "," + condi +"):" ); 
                                            } 
                                            else { 
                                                    lista.add("for "+id + " in range("+exp + "," + condi +"," + "-1" +"):" ); 
                                                 }
                                           Traductor.Traduc.contador++;
                                            lista.addAll(Traductor.Traduc.tabulaciones(inst));
                                            Traductor.Traduc.contador--;
                                            RESULT = lista;
                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // condicionFor ::= expresion MAYORK expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionFor",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condicionFor ::= expresion MENORK expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionFor",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condicionFor ::= expresion MAYORIK expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		     
                                    int val = Integer.parseInt(exp2.toString());
                                    val = val   -  1; 
                                    RESULT = Integer.toString(val);
                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionFor",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // condicionFor ::= expresion MENORIK expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		     
                                    int val = Integer.parseInt(exp2.toString());
                                    val = val   +1 ; 
                                    RESULT = Integer.toString(val);
                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionFor",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condicionFor ::= NUM 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionFor",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // masMenos ::= ID MAS MAS 
            {
              Object RESULT =null;
		 RESULT = "+"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("masMenos",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // masMenos ::= ID MENOS MENOS 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("masMenos",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // switch ::= SWITCH PARA ID PARC LLAVE_A cases DEFAULT DOS_PUNTOS lista_instr LLAVE_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int inst2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int inst2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList inst2 = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
     LinkedList<String> lista = new LinkedList<>();
     lista.add("def switch (case,valor)  \n switcher { " );
    Traductor.Traduc.contador++;
     lista.addAll(Traductor.Traduc.tabulaciones((LinkedList)val));
     Traductor.Traduc.contador--;     

    LinkedList<String> lista2 = new LinkedList<>();
    lista2.add("default:");
    Traductor.Traduc.contador++;
     lista2.addAll(Traductor.Traduc.tabulaciones(inst2));
     Traductor.Traduc.contador--;   
    Traductor.Traduc.contador++;
     lista.addAll(Traductor.Traduc.tabulaciones((LinkedList)lista2));
     Traductor.Traduc.contador--;     

     lista.add("}");
     RESULT = lista;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cases ::= CASE expresion DOS_PUNTOS lista_instr 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            LinkedList<String> lista = new LinkedList<>();
                                            lista.add("" + exp + ":");
                                             Traductor.Traduc.contador++;
                                             lista.addAll(Traductor.Traduc.tabulaciones(inst));
                                             Traductor.Traduc.contador--;                                               
                                             RESULT = lista;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cases ::= cases CASE expresion DOS_PUNTOS lista_instr 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList inst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            LinkedList<String> lista = new LinkedList<>();
                                            lista.addAll((LinkedList)val );
                                            lista.add("" + exp + ":");
                                            Traductor.Traduc.contador++;
                                            lista.addAll(Traductor.Traduc.tabulaciones(inst));
                                            Traductor.Traduc.contador--;      
                                            RESULT = lista;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // globales ::= VOID DGLOBALES PARA PARC LLAVE_A instG LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globales",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // instG ::= instG asigGlob 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // instG ::= asigGlob 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // asigGlob ::= STRING_TYPE ID EQUALS STRING PCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                         String clavee = String.valueOf(id);                        
                         data.Data.agregarV(clavee.toLowerCase(), value);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asigGlob",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // asigGlob ::= STRING_TYPE ID EQUALS newValue PCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                        System.out.println("-----------------------------------------------------------------------------------------------");
                         String clavee = String.valueOf(id);         
                        System.out.println("Guardando: " + clavee + " value " + valorId);               
                         data.Data.agregarV(clavee.toLowerCase(), valorId);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asigGlob",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // asigGlob ::= DOUBLE_TYPE ID EQUALS NUM PCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                         String clavee = String.valueOf(id);                        
                         data.Data.agregarV(clavee.toLowerCase(), value);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asigGlob",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // asigGlob ::= DOUBLE_TYPE ID EQUALS newValue PCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                        System.out.println("-----------------------------------------------------------------------------------------------");
                         String clavee = String.valueOf(id);         
                        System.out.println("Guardando: " + clavee + " value " + valorId);               
                         data.Data.agregarV(clavee.toLowerCase(), valorId);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asigGlob",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // asigGlob ::= error PCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asigGlob",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // newValue ::= DOLAR LLAVE_A NEWVALOR COMA STRING COMA STRING LLAVE_C 
            {
              Object RESULT =null;
		int fileleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fileright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object file = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                System.out.println(" ---------------------------------------------------------------------------------------------");
                            System.out.println(" -File -" +  file +  " id " + id);
                                String clavee = String.valueOf(file);
                                String id1 = String.valueOf(id); 
                                valorId = data.dataJson.getVariable(clavee,id1.toLowerCase());
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("newValue",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // gBarras ::= VOID GBARRAS PARA PARC LLAVE_A listBarras LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("gBarras",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // listBarras ::= listBarras instBarras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listBarras",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // listBarras ::= instBarras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listBarras",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // instBarras ::= STRING_TYPE R_TITULO EQUALS expBarras PCOMA 
            {
              Object RESULT =null;
		
                                 TituloBarras = valorId.toString();      
                                 System.out.println("TituloBarras: " + TituloBarras);
                                  data.Valorees.TituloBarras = TituloBarras;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instBarras",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // instBarras ::= STRING_TYPE R_TITULOX EQUALS expBarras PCOMA 
            {
              Object RESULT =null;
		
                                     TituloX = valorId.toString();      
                                     System.out.println("TituloX: " + TituloX);
                                    data.Valorees.TituloX = TituloX;         
                   
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instBarras",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // instBarras ::= STRING_TYPE R_TITULOY EQUALS expBarras PCOMA 
            {
              Object RESULT =null;
		
                                 TituloY = valorId.toString(); 
                                 data.Valorees.TituloY = TituloY;       
                                   System.out.println("TituloX: " + TituloY);       
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instBarras",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // instBarras ::= STRING_TYPE CORCHETEA CORCHETEC EJEX EQUALS listDatos PCOMA 
            {
              Object RESULT =null;
		 data.Valorees.show(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instBarras",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // instBarras ::= DOUBLE_TYPE CORCHETEA CORCHETEC VALORES EQUALS listDatos1 PCOMA 
            {
              Object RESULT =null;
		 data.Valorees.show(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instBarras",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // instBarras ::= asigBarras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instBarras",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // asigBarras ::= tipoDato ID EQUALS expBarras 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                              System.out.println("-----------------------------------------asigBarras-----------------------------"); 
   
                                  String clavee = String.valueOf(id);
System.out.println("Guardando: " + clavee + " value " + valorId);
                                 data.Data.agregarV(clavee.toLowerCase(),valorId);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asigBarras",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expBarras ::= newValue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expBarras",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expBarras ::= STRING 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                 valorId = value.toString();                                     
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expBarras",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expBarras ::= NUM 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                 valorId = value;                                     
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expBarras",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expBarras ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                String clavee = String.valueOf(id);
                                valorId = data.Data.obtenerV(clavee.toLowerCase());
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expBarras",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // listDatos ::= LLAVE_A datitos LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listDatos",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // datitos ::= datitos COMA datoos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datitos",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // datitos ::= datoos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datitos",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // datoos ::= newValue 
            {
              Object RESULT =null;
		 
                       data.Valorees.addEjex(valorId.toString());                 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datoos",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // datoos ::= STRING 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                 data.Valorees.addEjex(value.toString());
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datoos",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // datoos ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                String clavee = String.valueOf(id);
                                valorId = data.Data.obtenerV(clavee.toLowerCase());
                                data.Valorees.addEjex(valorId.toString());
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datoos",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // listDatos1 ::= LLAVE_A datitos1 LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listDatos1",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // datitos1 ::= datitos1 COMA datoos1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datitos1",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // datitos1 ::= datoos1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datitos1",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // datoos1 ::= newValue 
            {
              Object RESULT =null;
		 
                       data.Valorees.addValores(valorId.toString());                 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datoos1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // datoos1 ::= NUM 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                      data.Valorees.addValores(num.toString());                    
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datoos1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // datoos1 ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                String clavee = String.valueOf(id);
                                valorId = data.Data.obtenerV(clavee.toLowerCase());
                                data.Valorees.addValores(valorId.toString());
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datoos1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // gPie ::= VOID GPIE PARA PARC LLAVE_A listPie LLAVE_C 
            {
              Object RESULT =null;
		 data.Valorees.show(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("gPie",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // listPie ::= listPie instPie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listPie",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // listPie ::= instPie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listPie",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // instPie ::= STRING_TYPE R_TITULO EQUALS expBarras PCOMA 
            {
              Object RESULT =null;
		
                                 TituloPie = valorId.toString();      
                                 System.out.println("TituloBarras: " + TituloBarras);
                                  data.Valorees.TituloPie = TituloPie;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instPie",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // instPie ::= STRING_TYPE CORCHETEA CORCHETEC EJEX EQUALS listDatos2 PCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instPie",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // instPie ::= DOUBLE_TYPE CORCHETEA CORCHETEC VALORES EQUALS listDatos3 PCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instPie",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // listDatos2 ::= LLAVE_A datitos2 LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listDatos2",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // datitos2 ::= datitos2 COMA datoos2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datitos2",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // datitos2 ::= datoos2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datitos2",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // datoos2 ::= newValue 
            {
              Object RESULT =null;
		 
                       data.Valorees.addEjexP(valorId.toString());                 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datoos2",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // datoos2 ::= STRING 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                 data.Valorees.addEjexP(value.toString());
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datoos2",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // datoos2 ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                String clavee = String.valueOf(id);
                                valorId = data.Data.obtenerV(clavee.toLowerCase());
                                data.Valorees.addEjexP(valorId.toString());
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datoos2",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // listDatos3 ::= LLAVE_A datitos3 LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listDatos3",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // datitos3 ::= datitos3 COMA datoos3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datitos3",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // datitos3 ::= datoos3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datitos3",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // datoos3 ::= newValue 
            {
              Object RESULT =null;
		 
                       data.Valorees.addValoresP(valorId.toString());                 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datoos3",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // datoos3 ::= NUM 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                      data.Valorees.addValoresP(num.toString());                    
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datoos3",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // datoos3 ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                String clavee = String.valueOf(id);
                                valorId = data.Data.obtenerV(clavee.toLowerCase());
                                data.Valorees.addValoresP(valorId.toString());
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datoos3",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
