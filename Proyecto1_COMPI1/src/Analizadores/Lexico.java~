// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/Analizadores/lexico.jflex

package Analizadores;
import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\2\22\0\1\1\1\4"+
    "\1\5\1\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\12\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\0\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\51"+
    "\1\62\1\63\1\64\1\65\1\51\1\0\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\51"+
    "\1\66\1\67\1\70\7\0\1\3\252\0\2\71\115\0"+
    "\1\72\u01a8\0\2\3\u0100\0\1\73\325\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\2\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\20\25"+
    "\1\26\1\27\1\30\1\31\1\1\1\32\2\1\1\33"+
    "\2\0\1\34\3\0\1\35\1\16\1\36\1\37\6\25"+
    "\1\40\5\25\1\41\13\25\1\0\4\25\1\42\1\41"+
    "\3\0\2\43\1\44\2\0\4\25\1\0\6\25\1\0"+
    "\1\25\1\45\1\25\1\46\1\25\1\0\1\47\2\25"+
    "\1\0\4\25\1\0\2\25\1\50\1\0\2\25\1\0"+
    "\1\25\1\0\1\25\1\0\1\46\2\0\1\51\1\25"+
    "\1\52\1\25\1\52\1\53\2\25\1\0\2\25\1\0"+
    "\1\25\1\54\2\55\1\25\1\0\1\25\2\56\1\25"+
    "\1\57\1\25\1\0\3\25\1\0\1\25\1\0\1\25"+
    "\1\60\1\0\1\25\2\61\1\25\1\0\1\25\1\0"+
    "\1\35\2\62\1\63\2\25\2\0\2\25\1\0\1\25"+
    "\2\64\1\25\1\0\2\25\1\0\1\25\1\0\2\25"+
    "\1\0\1\25\1\0\1\25\1\0\1\25\2\65\2\66"+
    "\2\25\2\0\2\25\1\0\1\67\1\25\1\0\2\25"+
    "\1\0\2\70\1\71\2\72\2\73\2\74\1\25\1\75"+
    "\1\25\1\0\1\75\1\76\1\25\1\0\1\25\1\0"+
    "\1\25\2\77\1\100\1\101\1\100\1\101\2\102\1\0"+
    "\2\103\1\25\1\0\2\25\2\0\1\104\1\0\1\25"+
    "\1\0\2\25\3\0\1\25\1\0\1\25\2\105\2\0"+
    "\1\25\1\0\1\25\2\0\1\25\1\0\1\25\1\0"+
    "\1\106\1\25\1\0\2\107\1\25\1\0\2\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[297];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\74\0\170\0\264\0\74\0\74\0\360"+
    "\0\u012c\0\74\0\74\0\74\0\74\0\74\0\74\0\74"+
    "\0\u0168\0\u01a4\0\74\0\74\0\u01e0\0\74\0\u021c\0\74"+
    "\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384\0\u03c0\0\u03fc"+
    "\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc"+
    "\0\74\0\74\0\74\0\74\0\u0618\0\74\0\u0654\0\u0690"+
    "\0\74\0\u06cc\0\u0708\0\74\0\u0744\0\u0780\0\u07bc\0\u07f8"+
    "\0\u0834\0\74\0\74\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u0960"+
    "\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u0258"+
    "\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4"+
    "\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4"+
    "\0\74\0\74\0\u0f00\0\u0f3c\0\u0f78\0\74\0\u06cc\0\u0744"+
    "\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158"+
    "\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u0258"+
    "\0\u1338\0\u0258\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0"+
    "\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u0258"+
    "\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824"+
    "\0\74\0\u1860\0\u189c\0\u0258\0\u18d8\0\u0258\0\u1914\0\74"+
    "\0\u0258\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8"+
    "\0\u0258\0\u0258\0\74\0\u1af4\0\u1b30\0\u1b6c\0\u0258\0\74"+
    "\0\u1ba8\0\u0258\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10"+
    "\0\u1d4c\0\u1d88\0\u1dc4\0\u0258\0\u1e00\0\u1e3c\0\u0258\0\74"+
    "\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\74\0\u0258\0\74\0\u0258"+
    "\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c"+
    "\0\u0258\0\74\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u2274"+
    "\0\u22b0\0\u22ec\0\u2328\0\u2364\0\u23a0\0\u23dc\0\u2418\0\u2454"+
    "\0\u2490\0\u0258\0\74\0\u0258\0\74\0\u24cc\0\u2508\0\u2544"+
    "\0\u2580\0\u25bc\0\u25f8\0\u2634\0\u0258\0\u2670\0\u26ac\0\u26e8"+
    "\0\u2724\0\u2760\0\u0258\0\74\0\u0258\0\u0258\0\74\0\u0258"+
    "\0\74\0\u279c\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904"+
    "\0\u0258\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u0258\0\74"+
    "\0\u0258\0\u0258\0\74\0\74\0\u0258\0\74\0\u2a6c\0\u0258"+
    "\0\74\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u0258"+
    "\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4"+
    "\0\u2df0\0\u2e2c\0\u2e68\0\u0258\0\74\0\u2ea4\0\u2ee0\0\u2f1c"+
    "\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048\0\u3084\0\u30c0\0\u30fc"+
    "\0\74\0\u3138\0\u3174\0\u0258\0\74\0\u31b0\0\u31ec\0\u0258"+
    "\0\74";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[297];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\31"+
    "\1\40\3\31\1\41\1\42\1\31\1\43\1\31\1\44"+
    "\1\45\1\46\1\31\1\47\1\50\2\31\1\51\1\2"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\2"+
    "\122\0\1\61\45\0\5\62\1\0\55\62\1\63\10\62"+
    "\10\0\1\64\63\0\5\65\1\0\55\65\1\66\10\65"+
    "\14\0\1\67\4\0\1\70\72\0\1\71\1\0\1\22"+
    "\77\0\1\72\73\0\1\73\67\0\1\31\6\0\31\31"+
    "\34\0\1\31\6\0\16\31\1\74\2\31\1\75\7\31"+
    "\34\0\1\31\6\0\1\76\6\31\1\77\6\31\1\100"+
    "\12\31\34\0\1\31\6\0\4\31\1\101\11\31\1\102"+
    "\12\31\34\0\1\31\6\0\11\31\1\103\1\31\1\104"+
    "\15\31\34\0\1\31\6\0\1\105\15\31\1\106\12\31"+
    "\34\0\1\31\6\0\21\31\1\107\7\31\34\0\1\31"+
    "\6\0\5\31\1\110\7\31\1\111\13\31\34\0\1\31"+
    "\6\0\1\112\30\31\34\0\1\31\6\0\4\31\1\113"+
    "\17\31\1\114\4\31\34\0\1\31\6\0\21\31\1\115"+
    "\2\31\1\116\4\31\34\0\1\31\6\0\4\31\1\117"+
    "\24\31\34\0\1\31\6\0\23\31\1\120\2\31\1\121"+
    "\2\31\34\0\1\31\6\0\10\31\1\122\10\31\1\123"+
    "\7\31\7\0\1\124\24\0\1\31\6\0\1\125\15\31"+
    "\1\126\12\31\34\0\1\31\6\0\7\31\1\127\11\31"+
    "\1\130\7\31\101\0\1\131\42\0\1\132\7\0\1\133"+
    "\101\0\1\134\2\0\1\135\14\0\5\62\1\136\55\62"+
    "\1\63\15\62\1\137\55\62\1\63\10\62\5\65\1\0"+
    "\3\65\1\140\51\65\1\66\21\65\1\140\51\65\1\66"+
    "\10\65\14\141\1\142\57\141\2\70\2\0\70\70\22\0"+
    "\1\71\73\0\1\31\6\0\16\31\1\143\12\31\34\0"+
    "\1\31\6\0\4\31\1\144\24\31\34\0\1\31\6\0"+
    "\22\31\1\145\1\146\5\31\10\0\1\147\23\0\1\31"+
    "\6\0\1\150\30\31\34\0\1\31\6\0\15\31\1\151"+
    "\13\31\34\0\1\31\6\0\5\31\1\152\23\31\34\0"+
    "\1\31\6\0\24\31\1\153\4\31\34\0\1\31\6\0"+
    "\4\31\1\154\24\31\34\0\1\31\6\0\22\31\1\155"+
    "\6\31\10\0\1\156\23\0\1\31\6\0\13\31\1\157"+
    "\15\31\34\0\1\31\6\0\21\31\1\160\7\31\34\0"+
    "\1\31\6\0\1\161\30\31\34\0\1\31\6\0\23\31"+
    "\1\162\5\31\34\0\1\31\6\0\10\31\1\163\20\31"+
    "\7\0\1\164\24\0\1\31\6\0\26\31\1\165\2\31"+
    "\34\0\1\31\6\0\13\31\1\166\15\31\34\0\1\31"+
    "\6\0\10\31\1\167\20\31\7\0\1\170\24\0\1\31"+
    "\6\0\1\31\1\171\27\31\34\0\1\31\6\0\23\31"+
    "\1\172\5\31\34\0\1\31\6\0\21\31\1\173\7\31"+
    "\34\0\1\31\6\0\10\31\1\174\20\31\7\0\1\175"+
    "\24\0\1\31\6\0\23\31\1\176\5\31\34\0\1\31"+
    "\6\0\24\31\1\177\3\31\1\200\66\0\1\201\41\0"+
    "\1\31\6\0\13\31\1\202\15\31\34\0\1\31\6\0"+
    "\10\31\1\203\20\31\7\0\1\204\24\0\1\31\6\0"+
    "\10\31\1\205\20\31\7\0\1\206\24\0\1\31\6\0"+
    "\10\31\1\207\20\31\7\0\1\210\56\0\1\211\71\0"+
    "\1\212\62\0\1\175\27\0\1\175\2\0\14\141\1\213"+
    "\100\141\1\0\52\141\22\0\1\31\6\0\13\31\1\214"+
    "\15\31\34\0\1\31\6\0\1\215\30\31\34\0\1\31"+
    "\6\0\4\31\1\216\24\31\34\0\1\31\6\0\2\31"+
    "\1\217\26\31\47\0\1\220\60\0\1\31\6\0\21\31"+
    "\1\221\7\31\34\0\1\31\6\0\22\31\1\222\1\223"+
    "\5\31\10\0\1\224\23\0\1\31\6\0\1\225\7\31"+
    "\1\226\20\31\7\0\1\227\24\0\1\31\6\0\1\31"+
    "\1\230\27\31\34\0\1\31\6\0\27\31\1\231\1\31"+
    "\34\0\1\31\6\0\4\31\1\232\24\31\47\0\1\233"+
    "\60\0\1\31\6\0\22\31\1\234\6\31\10\0\1\235"+
    "\23\0\1\31\6\0\5\31\1\236\23\31\34\0\1\31"+
    "\6\0\15\31\1\237\13\31\60\0\1\240\47\0\1\31"+
    "\6\0\25\31\1\241\3\31\34\0\1\31\6\0\13\31"+
    "\1\242\15\31\34\0\1\31\6\0\25\31\1\243\3\31"+
    "\70\0\1\244\37\0\1\31\6\0\13\31\1\245\15\31"+
    "\34\0\1\31\6\0\24\31\1\246\4\31\34\0\1\31"+
    "\6\0\10\31\1\247\20\31\7\0\1\250\24\0\1\31"+
    "\6\0\23\31\1\251\5\31\66\0\1\252\41\0\1\31"+
    "\6\0\24\31\1\253\4\31\34\0\1\31\6\0\4\31"+
    "\1\254\24\31\67\0\1\255\40\0\1\31\6\0\16\31"+
    "\1\256\12\31\34\0\1\31\6\0\3\31\1\257\25\31"+
    "\46\0\1\260\61\0\1\31\6\0\13\31\1\261\15\31"+
    "\56\0\1\262\51\0\1\31\6\0\23\31\1\263\5\31"+
    "\66\0\1\264\60\0\1\250\27\0\1\250\2\0\21\141"+
    "\1\265\52\141\22\0\1\31\6\0\12\31\1\266\16\31"+
    "\11\0\1\267\22\0\1\31\6\0\7\31\1\270\21\31"+
    "\34\0\1\31\6\0\16\31\1\271\12\31\34\0\1\31"+
    "\6\0\10\31\1\272\20\31\7\0\1\273\51\0\1\274"+
    "\46\0\1\31\6\0\24\31\1\275\4\31\34\0\1\31"+
    "\6\0\15\31\1\276\13\31\60\0\1\277\47\0\1\31"+
    "\6\0\13\31\1\300\15\31\34\0\1\31\6\0\4\31"+
    "\1\301\24\31\47\0\1\302\60\0\1\31\6\0\10\31"+
    "\1\303\20\31\7\0\1\304\24\0\1\31\6\0\1\305"+
    "\30\31\34\0\1\31\6\0\1\306\30\31\43\0\1\307"+
    "\64\0\1\31\6\0\10\31\1\310\20\31\7\0\1\311"+
    "\24\0\1\31\6\0\21\31\1\312\7\31\34\0\1\31"+
    "\6\0\15\31\1\313\13\31\60\0\1\314\47\0\1\31"+
    "\6\0\2\31\1\315\26\31\45\0\1\316\62\0\1\31"+
    "\6\0\13\31\1\317\15\31\56\0\1\320\51\0\1\31"+
    "\6\0\21\31\1\321\7\31\34\0\1\31\6\0\4\31"+
    "\1\322\24\31\47\0\1\323\60\0\1\31\6\0\4\31"+
    "\1\324\24\31\47\0\1\325\60\0\1\31\6\0\13\31"+
    "\1\326\15\31\34\0\1\31\6\0\15\31\1\327\13\31"+
    "\60\0\1\330\71\0\1\331\51\0\1\31\6\0\13\31"+
    "\1\332\15\31\34\0\1\31\6\0\10\31\1\333\20\31"+
    "\7\0\1\334\43\0\1\334\27\0\1\334\24\0\1\31"+
    "\6\0\4\31\1\335\24\31\34\0\1\31\6\0\2\31"+
    "\1\336\26\31\45\0\1\337\62\0\1\31\6\0\13\31"+
    "\1\340\15\31\34\0\1\31\6\0\23\31\1\341\5\31"+
    "\66\0\1\342\41\0\1\31\6\0\2\31\1\343\26\31"+
    "\45\0\1\344\62\0\1\31\6\0\15\31\1\345\13\31"+
    "\34\0\1\31\6\0\6\31\1\346\22\31\51\0\1\347"+
    "\56\0\1\31\6\0\7\31\1\350\21\31\52\0\1\351"+
    "\55\0\1\31\6\0\16\31\1\352\12\31\61\0\1\353"+
    "\46\0\1\31\6\0\4\31\1\354\24\31\34\0\1\31"+
    "\6\0\4\31\1\355\24\31\34\0\1\31\6\0\24\31"+
    "\1\356\4\31\67\0\1\357\53\0\1\360\60\0\1\31"+
    "\6\0\23\31\1\361\5\31\34\0\1\31\6\0\21\31"+
    "\1\362\7\31\64\0\1\363\43\0\1\31\6\0\1\364"+
    "\30\31\43\0\1\365\64\0\1\31\6\0\16\31\1\366"+
    "\12\31\34\0\1\31\6\0\4\31\1\367\24\31\47\0"+
    "\1\370\60\0\1\31\6\0\27\31\1\371\1\372\72\0"+
    "\1\373\1\374\34\0\1\31\6\0\22\31\1\375\6\31"+
    "\10\0\1\376\21\0\1\377\1\0\1\31\6\0\31\31"+
    "\34\0\1\31\6\0\4\31\1\u0100\24\31\47\0\1\u0101"+
    "\56\0\1\377\75\0\1\31\6\0\6\31\1\u0102\22\31"+
    "\51\0\1\u0103\56\0\1\31\6\0\1\31\1\u0104\15\31"+
    "\1\u0105\11\31\44\0\1\u0106\15\0\1\u0107\45\0\1\31"+
    "\6\0\21\31\1\u0108\7\31\71\0\1\u0109\36\0\1\31"+
    "\6\0\13\31\1\u010a\15\31\56\0\1\u010b\51\0\1\31"+
    "\6\0\1\u010c\30\31\34\0\1\31\6\0\10\31\1\u010d"+
    "\20\31\7\0\1\u010e\33\0\1\u010f\103\0\1\u010e\27\0"+
    "\1\u010e\54\0\1\u0110\43\0\1\31\6\0\16\31\1\u0111"+
    "\12\31\61\0\1\u0112\46\0\1\31\6\0\21\31\1\u0113"+
    "\7\31\34\0\1\31\6\0\4\31\1\u0114\24\31\47\0"+
    "\1\u0115\110\0\1\u0116\62\0\1\u0117\27\0\1\u0117\24\0"+
    "\1\31\6\0\1\31\1\u0118\27\31\44\0\1\u0119\63\0"+
    "\1\31\6\0\21\31\1\u011a\7\31\64\0\1\u011b\75\0"+
    "\1\u011c\41\0\1\31\6\0\1\u011d\30\31\43\0\1\u011e"+
    "\64\0\1\31\6\0\1\u011f\30\31\43\0\1\u0120\77\0"+
    "\1\u0121\60\0\1\31\6\0\13\31\1\u0122\15\31\56\0"+
    "\1\u0123\51\0\1\31\6\0\22\31\1\u0124\6\31\10\0"+
    "\1\u0125\54\0\1\u0125\16\0\1\u0125\23\0\1\31\6\0"+
    "\4\31\1\u0126\24\31\47\0\1\u0127\60\0\1\31\6\0"+
    "\22\31\1\u0128\6\31\10\0\1\u0129\54\0\1\u0129\16\0"+
    "\1\u0129\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12840];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\2\11\2\1\7\11\2\1\2\11"+
    "\1\1\1\11\1\1\1\11\20\1\4\11\1\1\1\11"+
    "\2\1\1\11\2\0\1\11\3\0\2\1\2\11\30\1"+
    "\1\0\4\1\2\11\3\0\1\11\2\1\2\0\4\1"+
    "\1\0\6\1\1\0\5\1\1\0\3\1\1\0\4\1"+
    "\1\0\3\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\11\2\0\4\1\1\11\3\1\1\0\2\1"+
    "\1\0\3\1\1\11\1\1\1\0\2\1\1\11\3\1"+
    "\1\0\3\1\1\0\1\1\1\0\2\1\1\0\2\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\11\1\1\1\11"+
    "\3\1\2\0\2\1\1\0\2\1\1\11\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\11\1\1\1\11\2\1\2\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\1\1\1\11"+
    "\2\1\1\11\1\1\1\11\5\1\1\0\3\1\1\0"+
    "\1\1\1\0\2\1\1\11\2\1\2\11\1\1\1\11"+
    "\1\0\1\1\1\11\1\1\1\0\2\1\2\0\1\1"+
    "\1\0\1\1\1\0\2\1\3\0\1\1\1\0\2\1"+
    "\1\11\2\0\1\1\1\0\1\1\2\0\1\1\1\0"+
    "\1\1\1\0\1\11\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[297];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
public String errores="";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { errores += "<tr><td>Léxico</td><td> El caracter \""+yytext()+"\" no pertenece al lenguaje</td><td>"+yyline+"</td><td>"+yycolumn+"</td></tr>\n";
            }
          // fall through
          case 73: break;
          case 2:
            { /* Espacios en blanco se ignoran */
            }
          // fall through
          case 74: break;
          case 3:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "NOT", yytext().toString()); System.out.println("NOT: "+yytext()); return new Symbol(sym.NOT, yyline, yycolumn, yytext());
            }
          // fall through
          case 75: break;
          case 4:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "DOLAR", yytext().toString()); System.out.println("DOLAR: "+yytext()); return new Symbol(sym.DOLAR, yyline, yycolumn, yytext());
            }
          // fall through
          case 76: break;
          case 5:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "PORCENTAJE", yytext().toString()); System.out.println("PORCENTAJE: "+yytext()); return new Symbol(sym.PORCENTAJE, yyline, yycolumn, yytext());
            }
          // fall through
          case 77: break;
          case 6:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "PARA", yytext().toString());System.out.println("PARA: "+yytext()); return new Symbol(sym.PARA, yyline, yycolumn, yytext());
            }
          // fall through
          case 78: break;
          case 7:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "PARC", yytext().toString());System.out.println("PARC: "+yytext()); return new Symbol(sym.PARC, yyline, yycolumn, yytext());
            }
          // fall through
          case 79: break;
          case 8:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "PARC", yytext().toString()); System.out.println("MULTI: "+yytext()); return new Symbol(sym.MULTI, yyline, yycolumn, yytext());
            }
          // fall through
          case 80: break;
          case 9:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "PARC", yytext().toString()); System.out.println("MAS: "+yytext()); return new Symbol(sym.MAS, yyline, yycolumn, yytext());
            }
          // fall through
          case 81: break;
          case 10:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "COMA", yytext().toString()); System.out.println("COMA: "+yytext()); return new Symbol(sym.COMA, yyline, yycolumn, yytext());
            }
          // fall through
          case 82: break;
          case 11:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "PARC", yytext().toString()); System.out.println("MENOS: "+yytext()); return new Symbol(sym.MENOS, yyline, yycolumn, yytext());
            }
          // fall through
          case 83: break;
          case 12:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "PARC", yytext().toString()); System.out.println("DOT: "+yytext()); return new Symbol(sym.DOT, yyline, yycolumn, yytext());
            }
          // fall through
          case 84: break;
          case 13:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "DIVISION", yytext().toString()); System.out.println("DIVISION: "+yytext()); return new Symbol(sym.DIVISION, yyline, yycolumn, yytext());
            }
          // fall through
          case 85: break;
          case 14:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "NUM", yytext().toString());System.out.println("NUM: "+yytext()); return new Symbol(sym.NUM, yyline, yycolumn, yytext());
            }
          // fall through
          case 86: break;
          case 15:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "NUM", yytext().toString()); System.out.println("DOS_PUNTOS: "+yytext()); return new Symbol(sym.DOS_PUNTOS, yyline, yycolumn, yytext());
            }
          // fall through
          case 87: break;
          case 16:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "PCOMA", yytext().toString()); System.out.println("PCOMA: "+yytext()); return new Symbol(sym.PCOMA, yyline, yycolumn, yytext());
            }
          // fall through
          case 88: break;
          case 17:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "MENORK", yytext().toString()); System.out.println("MENORK: "+yytext()); return new Symbol(sym.MENORK, yyline, yycolumn, yytext());
            }
          // fall through
          case 89: break;
          case 18:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "EQUALS", yytext().toString()); System.out.println("EQUALS: "+yytext()); return new Symbol(sym.EQUALS, yyline, yycolumn, yytext());
            }
          // fall through
          case 90: break;
          case 19:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "MAYORK", yytext().toString()); System.out.println("MAYORK: "+yytext()); return new Symbol(sym.MAYORK, yyline, yycolumn, yytext());
            }
          // fall through
          case 91: break;
          case 20:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "CBOOL", yytext().toString()); System.out.println("CBOOL: "+yytext()); return new Symbol(sym.CBOOL, yyline, yycolumn, yytext());
            }
          // fall through
          case 92: break;
          case 21:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "ID", yytext().toString());System.out.println("ID: "+yytext()); return new Symbol(sym.ID, yyline, yycolumn, yytext());
            }
          // fall through
          case 93: break;
          case 22:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "CORCHETEA", yytext().toString()); System.out.println("CORCHETEA: "+yytext()); return new Symbol(sym.CORCHETEA, yyline, yycolumn, yytext());
            }
          // fall through
          case 94: break;
          case 23:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "CORCHETEC", yytext().toString());System.out.println("CORCHETEC: "+yytext()); return new Symbol(sym.CORCHETEC, yyline, yycolumn, yytext());
            }
          // fall through
          case 95: break;
          case 24:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "POTENCIA", yytext().toString()); System.out.println("POTENCIA: "+yytext()); return new Symbol(sym.POTENCIA, yyline, yycolumn, yytext());
            }
          // fall through
          case 96: break;
          case 25:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "LLAVE_A", yytext().toString()); System.out.println("LLAVE_A: "+yytext()); return new Symbol(sym.LLAVE_A, yyline, yycolumn, yytext());
            }
          // fall through
          case 97: break;
          case 26:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "LLAVE_C", yytext().toString());System.out.println("LLAVE_C: "+yytext()); return new Symbol(sym.LLAVE_C, yyline, yycolumn, yytext());
            }
          // fall through
          case 98: break;
          case 27:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "DISTINTO", yytext().toString()); System.out.println("DISTINTO: "+yytext()); return new Symbol(sym.DISTINTO, yyline, yycolumn, yytext());
            }
          // fall through
          case 99: break;
          case 28:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "AND", yytext().toString()); System.out.println("AND: "+yytext()); return new Symbol(sym.AND, yyline, yycolumn, yytext());
            }
          // fall through
          case 100: break;
          case 29:
            { 
            }
          // fall through
          case 101: break;
          case 30:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "MENORIK", yytext().toString()); System.out.println("MENORIK: "+yytext()); return new Symbol(sym.MENORIK, yyline, yycolumn, yytext());
            }
          // fall through
          case 102: break;
          case 31:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "MAYORIK", yytext().toString()); System.out.println("MAYORIK: "+yytext()); return new Symbol(sym.MAYORIK, yyline, yycolumn, yytext());
            }
          // fall through
          case 103: break;
          case 32:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_DO", yytext().toString());System.out.println("DO: "+yytext()); return new Symbol(sym.DO, yyline, yycolumn, yytext());
            }
          // fall through
          case 104: break;
          case 33:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_IF", yytext().toString());System.out.println("IF: "+yytext()); return new Symbol(sym.IF, yyline, yycolumn, yytext());
            }
          // fall through
          case 105: break;
          case 34:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "OR", yytext().toString()); System.out.println("OR: "+yytext()); return new Symbol(sym.OR, yyline, yycolumn, yytext());
            }
          // fall through
          case 106: break;
          case 35:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "STRING", yytext().toString());System.out.println("STRING: "+yytext()); return new Symbol(sym.STRING, yyline, yycolumn, yytext());
            }
          // fall through
          case 107: break;
          case 36:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "CHAR", yytext().toString());System.out.println("CHAR: "+yytext()); return new Symbol(sym.CHAR, yyline, yycolumn, yytext());
            }
          // fall through
          case 108: break;
          case 37:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_FOR", yytext().toString());System.out.println("FOR: "+yytext()); return new Symbol(sym.FOR, yyline, yycolumn, yytext());
            }
          // fall through
          case 109: break;
          case 38:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_INT", yytext().toString()); System.out.println("INT_TYPE: "+yytext()); return new Symbol(sym.INT_TYPE, yyline, yycolumn, yytext());
            }
          // fall through
          case 110: break;
          case 39:
            { System.out.println("NEW: "+yytext()); return new Symbol(sym.NEW, yyline, yycolumn, yytext());
            }
          // fall through
          case 111: break;
          case 40:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_TRY", yytext().toString()); System.out.println("TRY: "+yytext()); return new Symbol(sym.TRY, yyline, yycolumn, yytext());
            }
          // fall through
          case 112: break;
          case 41:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_BOOL", yytext().toString());System.out.println("BOOL_TYPE: "+yytext()); return new Symbol(sym.BOOL_TYPE, yyline, yycolumn, yytext());
            }
          // fall through
          case 113: break;
          case 42:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_CASE", yytext().toString());System.out.println("CASE: "+yytext()); return new Symbol(sym.CASE, yyline, yycolumn, yytext());
            }
          // fall through
          case 114: break;
          case 43:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_CHAR", yytext().toString());System.out.println("CHAR_TYPE: "+yytext()); return new Symbol(sym.CHAR_TYPE, yyline, yycolumn, yytext());
            }
          // fall through
          case 115: break;
          case 44:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_EJEX", yytext().toString());System.out.println("EJEX: "+yytext()); return new Symbol(sym.EJEX, yyline, yycolumn, yytext());
            }
          // fall through
          case 116: break;
          case 45:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_ELSE", yytext().toString());System.out.println("ELSE: "+yytext()); return new Symbol(sym.ELSE, yyline, yycolumn, yytext());
            }
          // fall through
          case 117: break;
          case 46:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_MAIN", yytext().toString()); System.out.println("MAIN: "+yytext()); return new Symbol(sym.MAIN, yyline, yycolumn, yytext());
            }
          // fall through
          case 118: break;
          case 47:
            { System.out.println("NULL: "+yytext()); return new Symbol(sym.NULL, yyline, yycolumn, yytext());
            }
          // fall through
          case 119: break;
          case 48:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_TRUE", yytext().toString());System.out.println("TRUE: "+yytext()); return new Symbol(sym.TRUE, yyline, yycolumn, yytext());
            }
          // fall through
          case 120: break;
          case 49:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_VOID", yytext().toString());System.out.println("VOID: "+yytext()); return new Symbol(sym.VOID, yyline, yycolumn, yytext());
            }
          // fall through
          case 121: break;
          case 50:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_BREAK", yytext().toString());System.out.println("BREAK: "+yytext()); return new Symbol(sym.BREAK, yyline, yycolumn, yytext());
            }
          // fall through
          case 122: break;
          case 51:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_CATCH", yytext().toString());System.out.println("CATCH: "+yytext()); return new Symbol(sym.CATCH, yyline, yycolumn, yytext());
            }
          // fall through
          case 123: break;
          case 52:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_FALSE", yytext().toString());System.out.println("FALSE: "+yytext()); return new Symbol(sym.FALSE, yyline, yycolumn, yytext());
            }
          // fall through
          case 124: break;
          case 53:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_WHILE", yytext().toString());System.out.println("WHILE: "+yytext()); return new Symbol(sym.WHILE, yyline, yycolumn, yytext());
            }
          // fall through
          case 125: break;
          case 54:
            { System.out.println("WRITE: "+yytext()); return new Symbol(sym.WRITE, yyline, yycolumn, yytext());
            }
          // fall through
          case 126: break;
          case 55:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_DOUBLE", yytext().toString());System.out.println("DOUBLE_TYPE: "+yytext()); return new Symbol(sym.DOUBLE_TYPE, yyline, yycolumn, yytext());
            }
          // fall through
          case 127: break;
          case 56:
            { System.out.println("PUBLIC: "+yytext()); return new Symbol(sym.PUBLIC, yyline, yycolumn, yytext());
            }
          // fall through
          case 128: break;
          case 57:
            { System.out.println("RETURN: "+yytext()); return new Symbol(sym.RETURN, yyline, yycolumn, yytext());
            }
          // fall through
          case 129: break;
          case 58:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_STRING", yytext().toString());System.out.println("STRING_TYPE: "+yytext()); return new Symbol(sym.STRING_TYPE, yyline, yycolumn, yytext());
            }
          // fall through
          case 130: break;
          case 59:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_SWITCH", yytext().toString()); System.out.println("SWITCH: "+yytext()); return new Symbol(sym.SWITCH, yyline, yycolumn, yytext());
            }
          // fall through
          case 131: break;
          case 60:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_TITULO", yytext().toString()); System.out.println("R_TITULO: "+yytext()); return new Symbol(sym.R_TITULO, yyline, yycolumn, yytext());
            }
          // fall through
          case 132: break;
          case 61:
            { System.out.println("CONSOLE: "+yytext()); return new Symbol(sym.CONSOLE, yyline, yycolumn, yytext());
            }
          // fall through
          case 133: break;
          case 62:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_DEFAULT", yytext().toString());System.out.println("DEFAULT: "+yytext()); return new Symbol(sym.DEFAULT, yyline, yycolumn, yytext());
            }
          // fall through
          case 134: break;
          case 63:
            { System.out.println("PRIVATE: "+yytext()); return new Symbol(sym.PRIVATE, yyline, yycolumn, yytext());
            }
          // fall through
          case 135: break;
          case 64:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_TITULOX", yytext().toString()); System.out.println("R_TITULOX: "+yytext()); return new Symbol(sym.R_TITULOX, yyline, yycolumn, yytext());
            }
          // fall through
          case 136: break;
          case 65:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_TITULOY", yytext().toString());System.out.println("R_TITULOY: "+yytext()); return new Symbol(sym.R_TITULOY, yyline, yycolumn, yytext());
            }
          // fall through
          case 137: break;
          case 66:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_VALORES", yytext().toString());System.out.println("VALORES: "+yytext()); return new Symbol(sym.VALORES, yyline, yycolumn, yytext());
            }
          // fall through
          case 138: break;
          case 67:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_CONTINUE", yytext().toString());System.out.println("CONTINUE: "+yytext()); return new Symbol(sym.CONTINUE, yyline, yycolumn, yytext());
            }
          // fall through
          case 139: break;
          case 68:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_NEWVALOR", yytext().toString());System.out.println("NEWVALOR: "+yytext()); return new Symbol(sym.NEWVALOR, yyline, yycolumn, yytext());
            }
          // fall through
          case 140: break;
          case 69:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_GPIE", yytext().toString());System.out.println("GPIE: "+yytext()); return new Symbol(sym.GPIE, yyline, yycolumn, yytext());
            }
          // fall through
          case 141: break;
          case 70:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_PRINT", yytext().toString());System.out.println("PRINT: "+yytext()); return new Symbol(sym.PRINT, yyline, yycolumn, yytext());
            }
          // fall through
          case 142: break;
          case 71:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_GBARRAS", yytext().toString());System.out.println("GBARRAS: "+yytext()); return new Symbol(sym.GBARRAS, yyline, yycolumn, yytext());
            }
          // fall through
          case 143: break;
          case 72:
            { Tabla_Simbolos.DataSimbolos.addSimbolo(yyline ,yycolumn, "R_DGLOBALES", yytext().toString());System.out.println("DGLOBALES: "+yytext()); return new Symbol(sym.DGLOBALES, yyline, yycolumn, yytext());
            }
          // fall through
          case 144: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
