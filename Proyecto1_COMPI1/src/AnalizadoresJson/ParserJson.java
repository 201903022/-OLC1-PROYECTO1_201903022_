
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalizadoresJson;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserJson extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserJson() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserJson(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserJson(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\010\000\002\002\005\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\004\003" +
    "\000\002\005\003\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\016\000\004\010\004\001\002\000\006\004\010\013" +
    "\007\001\002\000\004\002\006\001\002\000\004\002\000" +
    "\001\002\000\010\004\ufffc\011\ufffc\013\ufffc\001\002\000" +
    "\004\012\015\001\002\000\010\004\ufffe\011\ufffe\013\ufffe" +
    "\001\002\000\010\004\010\011\014\013\007\001\002\000" +
    "\010\004\uffff\011\uffff\013\uffff\001\002\000\004\002\001" +
    "\001\002\000\006\004\017\006\016\001\002\000\010\004" +
    "\ufffa\011\ufffa\013\ufffa\001\002\000\010\004\ufffb\011\ufffb" +
    "\013\ufffb\001\002\000\010\004\ufffd\011\ufffd\013\ufffd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\016\000\004\002\004\001\001\000\006\003\011\004" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserJson$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserJson$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserJson$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String resultado = ""; 
    public void symboll(Symbol s)
    {
            System.out.println(" "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado "  + s.sym);
    }

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado "+s.sym  );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }
  HashMap<String,Object> variables = new HashMap();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserJson$actions {

  
  private final ParserJson parser;

  /** Constructor */
  CUP$ParserJson$actions(ParserJson parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserJson$do_action_part00000000(
    int                        CUP$ParserJson$act_num,
    java_cup.runtime.lr_parser CUP$ParserJson$parser,
    java.util.Stack            CUP$ParserJson$stack,
    int                        CUP$ParserJson$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserJson$result;

      /* select the action based on the action number */
      switch (CUP$ParserJson$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= LLAVE_A lista_instr LLAVE_C 
            {
              Object RESULT =null;
		
    
                                        
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		RESULT = start_val;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserJson$parser.done_parsing();
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_instr ::= lista_instr instruccion 
            {
              Object RESULT =null;
		 
        
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("lista_instr",1, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instr ::= instruccion 
            {
              Object RESULT =null;

              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("lista_instr",1, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= STRING DOS_PUNTOS datos 
            {
              Object RESULT =null;
		int claveleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int claveright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		Object clave = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		
                               data.dataJson.variables.put(clave.toString(), valor);
                           
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= COMA 
            {
              Object RESULT =null;

              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // datos ::= STRING 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		
                                RESULT = value.toString();
                           
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("datos",3, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // datos ::= NUM 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		
 
                                RESULT = value;
                           
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("datos",3, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserJson$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserJson$do_action(
    int                        CUP$ParserJson$act_num,
    java_cup.runtime.lr_parser CUP$ParserJson$parser,
    java.util.Stack            CUP$ParserJson$stack,
    int                        CUP$ParserJson$top)
    throws java.lang.Exception
    {
              return CUP$ParserJson$do_action_part00000000(
                               CUP$ParserJson$act_num,
                               CUP$ParserJson$parser,
                               CUP$ParserJson$stack,
                               CUP$ParserJson$top);
    }
}

}
